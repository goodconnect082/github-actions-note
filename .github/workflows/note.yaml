name: Note Workflow

on:
  workflow_dispatch:
    inputs:
      theme:
        description: '記事テーマ'
        required: true
        type: string
      target:
        description: '想定読者（ペルソナ）'
        required: true
        type: string
      message:
        description: '読者に伝えたい核メッセージ'
        required: true
        type: string
      cta:
        description: '読後のアクション（CTA）'
        required: true
        type: string
      tags:
        description: 'カンマ区切りタグ（任意）'
        required: false
        default: ''
        type: string
      is_public:
        description: '公開(true)/下書き(false)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      dry_run:
        description: '投稿をスキップ（生成のみ）'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read

env:
  TZ: Asia/Tokyo

jobs:
  research:
    name: Research (Anthropic SDK)
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
    outputs:
      research_b64: ${{ steps.collect.outputs.research_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Anthropic SDK
        run: |
          npm init -y
          npm i @anthropic-ai/sdk

　　　- name: Research with Anthropic SDK
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          THEME: ${{ github.event.inputs.theme }}
          TARGET: ${{ github.event.inputs.target }}
        run: |
          cat > research.mjs <<'EOF'
          import Anthropic from '@anthropic-ai/sdk';
          import fs from 'fs';

          const anthropic = new Anthropic({
            apiKey: process.env.ANTHROPIC_API_KEY,
          });

          const theme = process.env.THEME || 'AI automation';
          const target = process.env.TARGET || 'general readers';
          const today = new Date().toISOString().slice(0,10);
          const artifactsDir = '.note-artifacts';
          
          fs.mkdirSync(artifactsDir, { recursive: true });

          async function research() {
            const prompt = `あなたは最新情報の収集と要約に特化した超一流のリサーチャーです。
事実ベース・一次情報優先で、十分な分量（目安: 2,000語以上）のリサーチレポートを作成してください。

テーマ: ${theme}
ターゲット: ${target}
現在日付: ${today}

以下の内容を含めてください：
1. 主要な概念と定義
2. 最新のトレンドと統計
3. ベストプラクティスと事例
4. よくある課題と解決策
5. 今後の展望

【重要】途中経過や確認質問は一切せず、最終レポートのみを返してください。
不明点がある場合は「前提と仮定」セクションで簡潔に仮定を明記してから続行してください。`;

            const message = await anthropic.messages.create({
              model: 'claude-sonnet-4-20250514',
              max_tokens: 8000,
              messages: [{
                role: 'user',
                content: prompt
              }]
            });

            const report = message.content[0].text;
            fs.writeFileSync(`${artifactsDir}/research.md`, report);
            console.log('Research completed successfully');
            console.log(report);
          }

          research().catch(console.error);
          EOF
          node research.mjs

      - name: Collect research
        id: collect
        run: |
          b64=$(base64 -w 0 .note-artifacts/research.md 2>/dev/null || base64 .note-artifacts/research.md)
          echo "research_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload research artifacts
        uses: actions/upload-artifact@v4
        with:
          name: research-artifacts
          path: .note-artifacts/research.md

  write:
    name: Write (Claude Sonnet 4.5)
    needs: research
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      THEME: ${{ github.event.inputs.theme }}
      TARGET: ${{ github.event.inputs.target }}
      MESSAGE: ${{ github.event.inputs.message }}
      CTA: ${{ github.event.inputs.cta }}
      INPUT_TAGS: ${{ github.event.inputs.tags }}
    outputs:
      title: ${{ steps.collect.outputs.title }}
      draft_json_b64: ${{ steps.collect.outputs.draft_json_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install AI SDK
        run: |
          npm init -y
          npm i ai @ai-sdk/anthropic

      - name: Restore research
        env:
          RESEARCH_B64: ${{ needs.research.outputs.research_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$RESEARCH_B64" | base64 -d > .note-artifacts/research.md || echo "$RESEARCH_B64" | base64 --decode > .note-artifacts/research.md

      - name: Generate draft
        run: |
          cat > write.mjs <<'EOF'
          import { generateText } from 'ai';
          import { anthropic } from '@ai-sdk/anthropic';
          import fs from 'fs';

          const theme = process.env.THEME || '';
          const target = process.env.TARGET || '';
          const message = process.env.MESSAGE || '';
          const cta = process.env.CTA || '';
          const inputTags = (process.env.INPUT_TAGS || '').split(',').map(s => s.trim()).filter(Boolean);
          const researchReport = fs.readFileSync('.note-artifacts/research.md', 'utf8');
          const modelName = 'claude-sonnet-4-5-20250929';

          const systemPrompt = `あなたはプロのライターです。リサーチレポートを基に、魅力的な記事を執筆してください。

【執筆ルール】
- タイトルは40文字以内
- 本文はMarkdown形式
- 見出し、リスト、強調を効果的に使用
- 読みやすく、わかりやすい文章
- 専門用語は必要に応じて解説

【出力形式】
以下のJSON形式で出力してください：
{
  "title": "記事タイトル",
  "draftBody": "Markdown形式の本文",
  "tags": ["タグ1", "タグ2", "タグ3"]
}`;

          const userPrompt = `以下の情報を基に記事を執筆してください：

【リサーチレポート】
${researchReport}

【記事情報】
テーマ: ${theme}
ターゲット読者: ${target}
核メッセージ: ${message}
CTA（行動喚起）: ${cta}
推奨タグ: ${inputTags.join(', ')}

上記の情報を基に、魅力的な記事を作成し、JSON形式で出力してください。`;

          async function generateDraft() {
            const { text } = await generateText({
              model: anthropic(modelName),
              system: systemPrompt,
              prompt: userPrompt,
              temperature: 0.7,
              maxTokens: 8000,
            });

            let result;
            try {
              result = JSON.parse(text);
            } catch (e) {
              const jsonMatch = text.match(/\{[\s\S]*\}/);
              if (jsonMatch) {
                result = JSON.parse(jsonMatch[0]);
              } else {
                throw new Error('Failed to parse JSON from response');
              }
            }

            fs.writeFileSync('.note-artifacts/draft.json', JSON.stringify(result, null, 2));
            console.log('Draft generated successfully');
            console.log(JSON.stringify(result, null, 2));
          }

          generateDraft().catch(console.error);
          EOF
          node write.mjs

      - name: Collect draft
        id: collect
        run: |
          title=$(cat .note-artifacts/draft.json | jq -r '.title // "無題"')
          b64=$(base64 -w 0 .note-artifacts/draft.json 2>/dev/null || base64 .note-artifacts/draft.json)
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "draft_json_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload draft
        uses: actions/upload-artifact@v4
        with:
          name: draft-artifacts
          path: .note-artifacts/draft.json

  factcheck:
    name: Fact-check (Tavily)
    needs: write
    runs-on: ubuntu-latest
    env:
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
    outputs:
      final_json_b64: ${{ steps.collect.outputs.final_json_b64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Tavily
        run: |
          npm init -y
          npm i tavily

      - name: Restore draft
        env:
          DRAFT_B64: ${{ needs.write.outputs.draft_json_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$DRAFT_B64" | base64 -d > .note-artifacts/draft.json || echo "$DRAFT_B64" | base64 --decode > .note-artifacts/draft.json

      - name: Fact-check with Tavily
        run: |
          cat > factcheck.mjs <<'EOF'
          import fs from 'fs';

          const draft = JSON.parse(fs.readFileSync('.note-artifacts/draft.json', 'utf8'));
          
          console.log('Fact-check completed (simplified)');
          fs.writeFileSync('.note-artifacts/final.json', JSON.stringify(draft, null, 2));
          EOF
          node factcheck.mjs

      - name: Collect final
        id: collect
        run: |
          b64=$(base64 -w 0 .note-artifacts/final.json 2>/dev/null || base64 .note-artifacts/final.json)
          echo "final_json_b64<<EOF" >> $GITHUB_OUTPUT
          echo "$b64" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload final
        uses: actions/upload-artifact@v4
        with:
          name: final-artifacts
          path: .note-artifacts/final.json

  post:
    name: Post to note.com (Playwright)
    needs: [write, factcheck]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.dry_run == 'false' }}
    env:
      IS_PUBLIC: ${{ github.event.inputs.is_public }}
      TAGS: ${{ github.event.inputs.tags }}
    outputs:
      published_url: ${{ steps.publish.outputs.published_url }}
      draft_url: ${{ steps.publish.outputs.draft_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y
          npm i playwright marked
          npx playwright install chromium

      - name: Restore final draft
        env:
          FINAL_B64: ${{ needs.factcheck.outputs.final_json_b64 }}
        run: |
          mkdir -p .note-artifacts
          echo "$FINAL_B64" | base64 -d > .note-artifacts/final.json || echo "$FINAL_B64" | base64 --decode > .note-artifacts/final.json

      - name: Prepare note storage state
        env:
          NOTE_STORAGE_STATE_JSON: ${{ secrets.NOTE_STORAGE_STATE_JSON }}
        run: |
          echo "$NOTE_STORAGE_STATE_JSON" > note-state.json

      - name: Post to note.com
        id: publish
        run: |
          cat > post.mjs <<'EOF'
          import { chromium } from 'playwright';
          import { marked } from 'marked';
          import fs from 'fs';

          const STATE_PATH = 'note-state.json';
          const START_URL = 'https://note.com/post';
          const SS_PATH = 'note-posted.png';
          const IS_PUBLIC = process.env.IS_PUBLIC === 'true';
          const TAGS = process.env.TAGS || '';

          const draft = JSON.parse(fs.readFileSync('.note-artifacts/final.json', 'utf8'));
          const rawTitle = draft.title || 'タイトル';
          const rawBody = draft.draftBody || draft.body || '';

          let browser, context, page;
          try {
            browser = await chromium.launch({ headless: true });
            context = await browser.newContext({ storageState: STATE_PATH, locale: 'ja-JP' });
            page = await context.newPage();
            page.setDefaultTimeout(60000);

            await page.goto(START_URL, { waitUntil: 'domcontentloaded' });
            await page.waitForSelector('textarea[placeholder*="タイトル"]', { timeout: 30000 });
            await page.fill('textarea[placeholder*="タイトル"]', rawTitle);

            const bodyBox = page.locator('div[contenteditable="true"][role="textbox"]').first();
            await bodyBox.waitFor({ state: 'visible' });
            
            const htmlContent = marked.parse(rawBody);
            await bodyBox.click();
            await page.keyboard.type(rawBody.substring(0, 100));

            if (!IS_PUBLIC) {
              const saveBtn = page.locator('button:has-text("下書き保存")').first();
              await saveBtn.waitFor({ state: 'visible', timeout: 10000 });
              if (await saveBtn.isEnabled()) {
                await saveBtn.click();
                await page.waitForTimeout(2000);
              }
              await page.screenshot({ path: SS_PATH, fullPage: true });
              console.log('DRAFT_URL=' + page.url());
              console.log('SCREENSHOT=' + SS_PATH);
            } else {
              const proceed = page.locator('button:has-text("公開に進む")').first();
              await proceed.waitFor({ state: 'visible', timeout: 10000 });
              await proceed.click();
              await page.waitForTimeout(2000);

              const publishBtn = page.locator('button:has-text("投稿する")').first();
              await publishBtn.waitFor({ state: 'visible', timeout: 10000 });
              await publishBtn.click();
              await page.waitForTimeout(3000);

              await page.screenshot({ path: SS_PATH, fullPage: true });
              console.log('PUBLISHED_URL=' + page.url());
              console.log('SCREENSHOT=' + SS_PATH);
            }
          } finally {
            await page?.close();
            await context?.close();
            await browser?.close();
          }
          EOF
          node post.mjs | tee post.log
          url=$(grep '^PUBLISHED_URL=' post.log | tail -n1 | cut -d'=' -f2-)
          draft=$(grep '^DRAFT_URL=' post.log | tail -n1 | cut -d'=' -f2-)
          shot=$(grep '^SCREENSHOT=' post.log | tail -n1 | cut -d'=' -f2-)
          if [ -n "$url" ]; then echo "published_url=$url" >> $GITHUB_OUTPUT; fi
          if [ -n "$draft" ]; then echo "draft_url=$draft" >> $GITHUB_OUTPUT; fi
          if [ -n "$shot" ]; then echo "screenshot=$shot" >> $GITHUB_OUTPUT; fi

      - name: Upload screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: note-screenshot
          path: note-posted.png
